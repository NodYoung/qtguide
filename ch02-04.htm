<!DOCTYPE html>
<html>
  <head>
    <meta content="text/html; charset=UTF-8" http-equiv="content-type">
    <title>ch02-04</title>
    <link href="css/style.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="thumbnailviewer.css" type="text/css">
    <script src="thumbnailviewer.js" type="text/javascript">

/***********************************************
* Image Thumbnail Viewer Script- © Dynamic Drive (www.dynamicdrive.com)
* This notice must stay intact for legal use.
* Visit http://www.dynamicdrive.com/ for full source code
***********************************************/

</script> </head>
  <body>
    <div class="os1">2.4 Hello Creator</div>
    <br>
    上节介绍了 Qt 图形程序的大致生成过程，本节开始使用集成开发环境 Qt Creator，在 Qt Creator 诞生之前， Qt 程序可以通过
    qmake 命令行编译或者像上一节手动输入 g++ 命令编译，在 Linux 平台还有 KDevelop 这类 KDE 桌面程序开发环境（一般用
    cmake 生成脚本）。在 Qt 被诺基亚收购之前，Qt 官方一直没有有自己的集成开发环境，诺基亚收购之后，力推了 Qt 自己的集成开发环境，就是 Qt
    Creator，这为 Qt 开发带来很大的方便。<br>
    如今 Qt Creator 功能十分强大了，包含项目模板生成、代码编辑、UI 设计、QML
    界面编辑、调试程序、上下文帮助等丰富功能，而且支持手机平板设备、嵌入式设备等程序的开发调试。 本节通过一个简单例子展示 Qt Creator
    的代码编辑和 UI 编辑功能。Qt 程序调试和 Qt 帮助系统在后续章节讲解。 <br>
    <br>
    <div class="os2">2.4.1 Qt Creator 界面概览</div>
    <br>
    从开始菜单打开 QtCreator 集成开发环境，启动之后看到类似下面的界面：<br>
    <center><img src="images/ch02/ch02-04-01.png" alt="qtcreator" width="800"> </center>
    QtCreator 里面最上方的是菜单栏，最左边的是一排功能按钮。左边按钮上半部分是 QtCreator
    工作模式选择，共有七种工作模式：欢迎、编辑（编写代码）、设计（GUI可视化编辑）、Debug（调试程序）、项目（项目参数配置）、分析（程序执行效率分析）、帮助。
    左边按钮下面四个是构建调试区，由上到下依次是Qt套件选择、运行、调试运行和构建。左边的设计按钮、项目按钮和构建调试区只有在打开或新建了项目之后才会变得可
    用。<br>
    <br>
    QtCreator 下方的是定位工具和输出面板，在编写项目代码和运行、调试程序时会使用到。输出面板包括七个：问题（项目构建时的问题）、Search
    Results（搜索项目文件内容）、应用程序输出（运行和调试信息显示）、编译输出（编译、链接命令及其输出信息）、QML/JS Console（QML
    命令窗口）、概要信息（项目信息摘要）、Version Control（版本控制系统）。<br>
    <br>
    QtCreator 中间的区域是所选择的工作模式界面，默认是欢迎模式。欢迎模式有三个子功能，第一个 Project
    是项目显示，包括之前的会话和项目记录。项目记录比较好理解，而会话涵盖内容比较广，一个会话可以是多个项目的列表，并含有它们的配置以及上次编辑位置记录等等。会话记录
    的上方是新建项目的快捷按钮，项目记录的上方是打开项目的快捷按钮。欢迎模式另外两个子功能是浏览 Qt 库自带的示例和教程，感兴趣的读者可以自行打开看看。<br>
    <br>
    <div class="os2">2.4.2 新建项目</div>
    <br>
    接下来我们新建一个 HelloCreator 项目，看看 QtCreator 集成开发环境新建的窗体项目。打开 QtCreator 文件菜单，点击“新建
    文件或项目”（快捷键 Ctrl+N），或者直接在欢迎模式点击快捷按钮“New Project”，都可以打开如下所示的新建项目对话框：<br>
    <center><img src="images/ch02/ch02-04-02.png" alt="newproject" width="800"></center>
    新建项目对话框里有五类项目模板：<br>
    <ul>
      <li>Application：Qt 应用程序，包括普通窗体程序和 QtQuick 程序。</li>
      <li>Library：可以创建动态库、静态库以及 QtQuick 扩展插件、QtCreator 自身插件。</li>
      <li>其他项目：可以创建单元测试项目、Qt4 设计师自定义控件、子目录项目等。</li>
      <li>非 Qt 项目：可以创建纯 C 或 纯 C++ 项目。</li>
      <li>导入项目：从版本控制系统管理的软件项目导入旧的项目。</li>
    </ul>
    本教程常用的只有第一类 Application。在 Qt 应用程序里有四个子模板：<br>
    <ul>
      <li>Qt Widgets Application：普通窗体模板，传统基于部件的窗体界面程序。</li>
      <li>Qt Quick Application：使用 QtQuick 设计界面的应用程序，编译得到二进制可执行程序。</li>
      <li>Qt 控制台应用：因为 Qt 主要用于图形界面设计，这个控制台项目模板基本不用的。</li>
      <li>Qt Quick UI：使用 QtQuick 设计的界面文件 *.qml ，项目不需要编译，而是使用 qmlscene 工具预览界面。</li>
    </ul>
    本教程使用第一个子模板 Qt Widgets Application，开发普通的 Qt
    窗体应用程序。选择该项目模板，点击对话框下方的“Choose...”按钮，进入 Qt Widgets Application 项目新建的界面：<br>
    <center><img src="images/ch02/ch02-04-03.png" alt="widgetsapplication" width="800"></center>
    将项目名称设置为 hellocreator ，创建路径设置为 D:\QtProjects\ch02，点击“下一步”，进入“Kit
    Selection”界面：<br>
    <center><img src="images/ch02/ch02-04-04.png" alt="kitselection" width="800"></center>
    这一步是为 hellocreator 设置 Qt 套件（Qt Kits），如果安装配置了多个 Qt 套件，就可以都选上。Qt 套件是指 Qt
    程序从编译链接到运行环境的全部工具和 Qt 类库的集合，对于 MinGW 版本 Qt 程序生成和调试，至少需要 MinGW 中的编译器
    g++（自动调用链接器）、g++ 配套的基础库、调试器 gdb 还有使用 MinGW 环境编译而成的 Qt 类库自身。默认情况下，在上面 Kit
    Selection 里选中全部套件，然后点击“下一步”，进入“类信息”设置界面：<br>
    <center><img src="images/ch02/ch02-04-05.png" alt="classinfo" width="800"></center>
    在类信息设置界面，最关键的是基类的选择，目前是三种基类：<br>
    <ul>
      <li>QMainWindow：基于主窗口类的程序，一般用于较为复杂的应用程序，除了中央客户区界面，还可以包括菜单栏、工具栏、状态栏以及多个可停靠的
        工具对话框等等。</li>
      <li>QWidget：最简单最基本的窗体程序，里面可以放置多个控件实现程序功能。</li>
      <li>QDialog：基于对话框的程序，对话框一般用于弹窗，也可以用于主界面显示。对话框是从 QWidget
        继承而来的，并丰富了一些功能，如模态显示和返回值等。</li>
    </ul>
    我们当然从最简单的学起，在基类里选择 QWidget ，类名和文件名会根据基类自动修改，不需要额外设置。点击“下一步”，进入“项目管理”界面：<br>
    <center><img src="images/ch02/ch02-04-06.png" alt="manage" width="800"></center>
    在项目管理界面可以设置作为子项目，以及加入版本控制系统管理。这两个功能暂时用不到，都用默认的 &lt;None&gt; ，然后点击 “完成”。<br>
    <br>
    项目创建完成之后，QtCreator 会直接进入代码编辑模式，可以看到类似下图界面：<br>
    <center><img src="images/ch02/ch02-04-07.png" alt="editmode" width="800"></center>
    编辑模式左边竖排的两个窗口叫做“边栏”，上面的默认是项目文件管理窗口，下面的是打开文件列表窗口。在 QtCreator
    菜单“控件”--&gt;“显示边栏&nbsp;&nbsp;&nbsp; Alt +
    0”，可以控制边栏的显示和隐藏。边栏里的窗口数目可以增加，边栏子窗口标题栏有一排小按钮，最右边的是关闭按钮，倒数第二个是增加分栏按钮，可以添加多个边栏子
    窗口。边栏子窗口标题栏第一个控件是组合框，可以选择该子窗口的功能视图类型，目前可以选择 8 个视图类型：<br>
    <ul>
      <li>项目：即项目文件管理视图，可以选择项目里的文件进行编辑，包括 pro 文件也可以手动编辑。</li>
      <li>打开文档：当前已经打开的文件列表，文件名右边如果有 * 号，是该文件被修改了但尚未保存。</li>
      <li>书签：右击代码编辑器行号位置，看到“切换书签”，可以给代码行添加书签，方便跳转到该位置。</li>
      <li>文件系统：相当于系统里的文件资源管理器，可以查看项目文件夹在磁盘里的实际文件列表。</li>
      <li>类视图：可以查看项目里包含的类及相应源代码文件里的成员函数、成员变量。</li>
      <li>大纲：编辑器所显示的当前文件的大纲列表，如名字空间、类名、成员函数、成员变量等。</li>
      <li>类型层次：当前项目包含的类及其基类、派生类列表。</li>
      <li>Include Hierarchy：包含视图，显示当前项目里 *.h 、*.cpp 以及 Qt 类库头文件之间的包含关系。</li>
    </ul>
    可见 QtCreator 提供的功能视图是很丰富的，这些视图不需要死记硬背，只要知道大概有这些东西，以后需要的时候会调出来就行了。一般用头两个就差不多
    了，当然也可以建立多个分栏，启用 其他功能视图。边栏介绍到这里，再看看右边的代码编辑器：<br>
    <center><img src="images/ch02/ch02-04-08.png" alt="codeedit"></center>
    代码编辑器大致可以分为三个部分，带有一堆控件的标题栏、行首区和编辑区。先看看标题栏的10个控件，这些东西不需要记，因为打开 QtCreator
    的时候，这些东西都在那里，用鼠标指向这些控件几秒钟，会自动显示这些控件的工具提示信息，这里将它们罗列出来，方便读者以后查阅而已：<br>
    <ul>
      <li>①和②：导航按钮“返回”和“前进”，这与网页浏览器的前进和后退按钮类似，可以在之前浏览的多个代码文件或一个代码文件里多个位置之间快速切换。</li>
      <li>③：标识当前显示的文件是只读还是可写，一般都是可写的。</li>
      <li>④：文件类型图标，当前显示文件的类型，这个控件其实是一个按钮，点击可以弹出丰富的文件处理功能菜单，感兴趣的读者可以点开看看。</li>
      <li>⑤：打开的文件名，可以在多个打开的文件之间选择切换，与边栏的“打开文档”视图是对应的。</li>
      <li>⑥：关闭当前显示的文档。</li>
      <li>⑦：选择符号，可以在当前显示的文件里多个函数、类、成员变量等之前快速切换，与边栏“大纲”视图是对应的。</li>
      <li>⑧：为当前显示的文件添加额外的C++预处理指令，一般用不着。</li>
      <li>⑨：编辑区光标的行号和列号。</li>
      <li>⑩：代码编辑区分栏，可以增加多个编辑器窗口，显示多个打开的文档或显示较大源码文件的多个位置。</li>
    </ul>
    行首区是浅灰色背景的部分，主要用来显示代码行号，以及调试断点标志和代码书签标志。右击行首区可以弹出右键菜单，菜单里可以切换书签、编辑书签以及设置或取消断
    点。同一行是既可以打断点也可以设置书签的，二者不冲突，其实它们根本就没关系。单击行号前面的浅灰色空白区可以直接打断点，再次单击可以取消断点，另外也可以用
    快捷键 F9 设置或取消断点。代码书签一般用右键菜单来设置，也可以用快捷键 Ctrl+M 设置或取消书签。<br>
    <br>
    编辑区是程序员最为常用的部分了，就是写代码用的。编辑区当然有语法高亮显示了，而且从编辑区的复制出来的内容是 HTML 语法的丰富文本格式，如果粘贴到
    Word 之类的文字处理软件中，会直接显示彩色高亮代码，这是很实用的功能。QtCreator 的编辑模式就介绍这么多，接下来看看图形界面可视化设计。<br>
    <br>
    <div class="os2">2.4.3 UI 编辑</div>
    <br>
    <div class="os2">2.4.4 代码讲解</div>
    <br>
    <div class="os2">2.4.5 程序生成和运行</div>
    <br>
    <br>
    <br>
    <table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">
      <tbody>
        <tr>
          <td style="width: 40%;">
            <div style="text-align: center;"> <a href="ch02-03.htm"><img class="pic"
                  style="width: 32px; height: 32px;" alt="prev" src="images/pics/prev.png"></a></div>
          </td>
          <td style="width: 20%;">
            <div style="text-align: center;"><a href="contents.htm"><img class="pic"
                  style="width: 32px; height: 32px;" alt="contents" src="images/pics/contents.png"></a></div>
          </td>
          <td style="width: 40%;">
            <div style="text-align: center;"> <a href="ch02-05.htm"><img class="pic"
                  style="width: 32px; height: 32px;" alt="next" src="images/pics/next.png"></a></div>
          </td>
        </tr>
      </tbody>
    </table>
  </body>
</html>
